<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>浏览器原理 on 姜波</title>
    <link>https://wilberjiang.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/</link>
    <description>Recent content in 浏览器原理 on 姜波</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 12 Oct 2022 22:14:27 +0800</lastBuildDate><atom:link href="https://wilberjiang.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>页面性能</title>
      <link>https://wilberjiang.com/post/browser/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD/</link>
      <pubDate>Wed, 12 Oct 2022 22:14:27 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/browser/%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD/</guid>
      <description>&lt;h2 id=&#34;显示器如何显示图像&#34;&gt;显示器如何显示图像&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个显示器都有固定的刷新频率，通常是 60HZ，也就是每秒更新 60 张图片，更新的图片都来自于显卡中一个叫前缓冲区的地方，显示器所做的任务很简单，就是每秒固定读取 60 次前缓冲区中的图像，并将读取的图像显示到显示器上。&lt;/li&gt;
&lt;li&gt;显卡的职责就是合成新的图像，并将图像保存到后缓冲区中，一旦显卡把合成的图像写到后缓冲区，系统就会让后缓冲区和前缓冲区互换，这样就能保证显示器能读取到最新显卡合成的图像。&lt;/li&gt;
&lt;li&gt;通常情况下，显卡的更新频率和显示器的刷新频率是一致的。但有时候，在一些复杂的场景中，显卡处理一张图片的速度会变慢，这样就会造成视觉上的卡顿。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>渲染流水线视角下的CSS</title>
      <link>https://wilberjiang.com/post/browser/%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%A7%86%E8%A7%92%E4%B8%8B%E7%9A%84css/</link>
      <pubDate>Tue, 11 Oct 2022 21:15:13 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/browser/%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%A7%86%E8%A7%92%E4%B8%8B%E7%9A%84css/</guid>
      <description>&lt;h2 id=&#34;css-文件和-html-文件&#34;&gt;CSS 文件和 HTML 文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;网络进程接收到返回的 HTML 数据之后，将其发送给渲染进程，渲染进程会解析 HTML 数据并构建 DOM。请求 HTML 数据和构建 DOM 中间有一段空闲时间，这个空闲时间有可能成为页面渲染的瓶颈。&lt;/li&gt;
&lt;li&gt;在 DOM 构建结束之后、CSS 文件还未下载完成的这段时间内，渲染流水线无事可做，因为下一步是合成布局树，而合成布局树需要 CSSOM 和 DOM，所以这里需要等待 CSS 加载结束并解析成 CSSOM。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>DOM树的构建</title>
      <link>https://wilberjiang.com/post/browser/dom%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Sun, 09 Oct 2022 22:24:11 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/browser/dom%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA/</guid>
      <description>&lt;h2 id=&#34;什么是-dom&#34;&gt;什么是 DOM&lt;/h2&gt;
&lt;p&gt;从网络传给渲染引擎的 HTML 文件字节流是无法直接被渲染引擎理解的，所以要将其转化为渲染引擎能够理解的内部结构，这个结构就是 DOM。DOM 提供了对 HTML 文档结构化的表述。在渲染引擎中，DOM 有三个层面的作用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编译器和解释器</title>
      <link>https://wilberjiang.com/post/browser/%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8C%E8%A7%A3%E9%87%8A%E5%99%A8/</link>
      <pubDate>Thu, 29 Sep 2022 22:12:23 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/browser/%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8C%E8%A7%A3%E9%87%8A%E5%99%A8/</guid>
      <description>&lt;h2 id=&#34;编译器和解释器&#34;&gt;编译器和解释器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。比如 C/C++、GO 等都是编译型语言。&lt;/li&gt;
&lt;li&gt;由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。比如 Python、JavaScript 等都属于解释型语言。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>垃圾回收</title>
      <link>https://wilberjiang.com/post/browser/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Wed, 28 Sep 2022 22:41:31 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/browser/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>&lt;h2 id=&#34;内存管理&#34;&gt;内存管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内存：由可读写单元组成，表示一片可操作空间&lt;/li&gt;
&lt;li&gt;管理：人为的去操作一片空间的申请、使用和释放&lt;/li&gt;
&lt;li&gt;内存管理：开发者主动申请空间、使用空间、释放空间&lt;/li&gt;
&lt;li&gt;管理流程：申请-使用-释放&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>渲染进程</title>
      <link>https://wilberjiang.com/post/browser/%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Wed, 21 Sep 2022 21:24:31 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/browser/%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B/</guid>
      <description>&lt;h2 id=&#34;渲染流水线&#34;&gt;渲染流水线&lt;/h2&gt;
&lt;p&gt;按照渲染的时间顺序，流水线可分为如下几个子阶段：构建 DOM 树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chrome架构</title>
      <link>https://wilberjiang.com/post/browser/chrome%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 12 Sep 2022 22:11:52 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/browser/chrome%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;h2 id=&#34;进程和线程&#34;&gt;进程和线程&lt;/h2&gt;
&lt;p&gt;启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，把这样的一个运行环境叫进程。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
