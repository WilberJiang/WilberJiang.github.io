<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微前端 on 姜波</title>
    <link>https://wilberjiang.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 微前端 on 姜波</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 17 Sep 2021 00:17:12 +0800</lastBuildDate><atom:link href="https://wilberjiang.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微前端实现方式对比</title>
      <link>https://wilberjiang.com/post/framework/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Fri, 17 Sep 2021 00:17:12 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;h2 id=&#34;iframe&#34;&gt;Iframe&lt;/h2&gt;
&lt;h3 id=&#34;优势&#34;&gt;优势&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;技术成熟&lt;/li&gt;
&lt;li&gt;支持页面嵌入&lt;/li&gt;
&lt;li&gt;天然支持运行沙箱隔离、独立运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;劣势&#34;&gt;劣势&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;页面之间可以是不同的域名，鉴权等&lt;/li&gt;
&lt;li&gt;需要对应的设计一套应用通讯机制，如何监听、传参格式等内容&lt;/li&gt;
&lt;li&gt;应用加载、渲染、缓存等体系的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web-component&#34;&gt;Web Component&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>微前端的架构设计</title>
      <link>https://wilberjiang.com/post/framework/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 12 Nov 2020 11:25:12 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h2 id=&#34;构建基础设施&#34;&gt;构建基础设施&lt;/h2&gt;
&lt;p&gt;在单体应用里，共享层往往只有一个，而在微前端架构里，共享层则往往存在多个，有的是应用间共用的共享层，有的是应用内共用的共享层。在微前端设计初期，构建基础设施要做如下几件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件与模式库。在应用之间提供通用的UI组件、共享的业务组件，以及相应的通用函数功能模块，如日期转换等&lt;/li&gt;
&lt;li&gt;应用通信机制。设计应用间的通信机制，并提供相应的底层库支持&lt;/li&gt;
&lt;li&gt;数据共享机制。对于通用的数据，采取一定的策略来缓存数据，而不是每个应用单独获取自己的数据&lt;/li&gt;
&lt;li&gt;专用的构建系统（可选）。在某些微前端实现里，如微件化，构建系统用于构建出每个单独的应用，又可以构建出最后的整个应用&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>微前端的业务划分方式</title>
      <link>https://wilberjiang.com/post/framework/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%88%92%E5%88%86%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 12 Nov 2020 11:06:34 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%88%92%E5%88%86%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;按照业务拆分&#34;&gt;按照业务拆分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可能同时存在多个系统，每个系统都代表自己的业务&lt;/li&gt;
&lt;li&gt;它们之间的关联可能并不是很紧密，对于前端应用来说，只需要一个系统内对象的ID，加上用户的Token，便能轻松从一个系统跳转到另外一个系统中&lt;/li&gt;
&lt;li&gt;如果业务间本身的耦合就比较严重，那么要从前端业务上分离它们，就不是很容易&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;按照权限拆分&#34;&gt;按照权限拆分&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>微前端的技术拆分方式</title>
      <link>https://wilberjiang.com/post/framework/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E6%8A%80%E6%9C%AF%E6%8B%86%E5%88%86%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 27 Oct 2020 21:53:12 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E6%8A%80%E6%9C%AF%E6%8B%86%E5%88%86%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;路由分发式&#34;&gt;路由分发式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过HTTP服务器的反向代理功能，将请求路由到对应的应用上&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
