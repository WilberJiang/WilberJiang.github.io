<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构设计 on 姜波</title>
    <link>https://wilberjiang.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in 架构设计 on 姜波</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 28 Oct 2022 22:26:41 +0800</lastBuildDate><atom:link href="https://wilberjiang.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>npm安装机制及企业级部署私服原理</title>
      <link>https://wilberjiang.com/post/framework/npm%E5%AE%89%E8%A3%85%E6%9C%BA%E5%88%B6%E5%8F%8A%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%8D%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 28 Oct 2022 22:26:41 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/npm%E5%AE%89%E8%A3%85%E6%9C%BA%E5%88%B6%E5%8F%8A%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%8D%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;npm内部机制&#34;&gt;npm内部机制&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>技术债务填补与崩溃预防</title>
      <link>https://wilberjiang.com/post/framework/%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E5%A1%AB%E8%A1%A5%E4%B8%8E%E5%B4%A9%E6%BA%83%E9%A2%84%E9%98%B2/</link>
      <pubDate>Wed, 15 Sep 2021 23:11:24 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E5%A1%AB%E8%A1%A5%E4%B8%8E%E5%B4%A9%E6%BA%83%E9%A2%84%E9%98%B2/</guid>
      <description>&lt;h2 id=&#34;技术债务填补&#34;&gt;技术债务填补&lt;/h2&gt;
&lt;h3 id=&#34;产生原因&#34;&gt;产生原因&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开发过程中因为时间紧迫导致的实现不合理&lt;/li&gt;
&lt;li&gt;暂时没有想到更好的实现方式而妥协的版本&lt;/li&gt;
&lt;li&gt;架构设计前期没有考虑到的细节&lt;/li&gt;
&lt;li&gt;不合理的交互设计，导致技术实现复杂&lt;/li&gt;
&lt;li&gt;旧功能文档缺失，无正确拓展、修改和兼容旧功能，导致上线后问题剧增&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>架构前期准备</title>
      <link>https://wilberjiang.com/post/framework/%E6%9E%B6%E6%9E%84%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</link>
      <pubDate>Wed, 15 Sep 2021 20:52:12 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E6%9E%B6%E6%9E%84%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</guid>
      <description>&lt;h2 id=&#34;架构师分类&#34;&gt;架构师分类&lt;/h2&gt;
&lt;h3 id=&#34;系统架构师&#34;&gt;系统架构师&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从系统的维度，负责整体系统的架构设计&lt;/li&gt;
&lt;li&gt;主要是基础服务和各系统间协调，着眼全局&lt;/li&gt;
&lt;li&gt;比如关注负载、可靠性、伸缩、扩展，整体项目切分，缓存应用等方面的基础架构设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用架构师&#34;&gt;应用架构师&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>如何保证架构的质量</title>
      <link>https://wilberjiang.com/post/framework/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9E%B6%E6%9E%84%E7%9A%84%E8%B4%A8%E9%87%8F/</link>
      <pubDate>Tue, 14 Sep 2021 22:12:55 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9E%B6%E6%9E%84%E7%9A%84%E8%B4%A8%E9%87%8F/</guid>
      <description>&lt;h2 id=&#34;系统的稳定性&#34;&gt;系统的稳定性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定义：当一个实际的系统处于一个平衡的状态时，如果受到外来作用的影响时，系统经过一个过渡过程仍然能够回到原来的平衡状态，称这个系统就是稳定的，否则称系统不稳定&lt;/li&gt;
&lt;li&gt;架构设计的基石&lt;/li&gt;
&lt;li&gt;可以更好的实现自我修复&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统的健壮性&#34;&gt;系统的健壮性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定义：计算机软件在输入错误、磁盘故障、网络过载或有意攻击情况下，能否不死机、不崩溃，就是该软件健壮性的具体表现&lt;/li&gt;
&lt;li&gt;解释：一个系统容错能力强，运行不易被干扰，安全性好&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;度量标准&#34;&gt;度量标准&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>软件设计原则与分层</title>
      <link>https://wilberjiang.com/post/framework/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E5%88%86%E5%B1%82/</link>
      <pubDate>Sun, 12 Sep 2021 22:12:13 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E5%88%86%E5%B1%82/</guid>
      <description>&lt;h2 id=&#34;软件设计原则&#34;&gt;软件设计原则&lt;/h2&gt;
&lt;h3 id=&#34;单一职责原则&#34;&gt;单一职责原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;永远不应该有多于一个原因来改变某个类&lt;/li&gt;
&lt;li&gt;理解：对于一个类而言，应该仅有一个引起它变化的原因&lt;/li&gt;
&lt;li&gt;应用：如果一个类拥有了两种职责，那就可以将这个类分成两个类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开放封闭原则&#34;&gt;开放封闭原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;软件实体扩展应该是开放的，但对于修改应该是封闭的&lt;/li&gt;
&lt;li&gt;理解：对扩展开放，对修改封闭，可以去扩展类，但不要去修改类&lt;/li&gt;
&lt;li&gt;应用：当需求有改动，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;里氏替换原则&#34;&gt;里氏替换原则&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>前端架构的前世今生</title>
      <link>https://wilberjiang.com/post/framework/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link>
      <pubDate>Fri, 10 Sep 2021 20:42:11 +0800</pubDate>
      
      <guid>https://wilberjiang.com/post/framework/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid>
      <description>&lt;h2 id=&#34;架构是如何产生的&#34;&gt;架构是如何产生的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;初始：无架构，前端代码内嵌到后端应用中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后端mvc架构&#34;&gt;后端MVC架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;将视图层、数据层、控制层做分离&lt;/li&gt;
&lt;li&gt;缺点：重度依赖开发环境，代码混淆严重&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前后端分离架构&#34;&gt;前后端分离架构&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>
